# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013-2017, Michael Droettboom, Space Telescope Science
# Institute
# This file is distributed under the same license as the Understanding JSON
# Schema package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Understanding JSON Schema 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-02-27 15:43+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../source/reference/numeric.rst:9
msgid "Numeric types"
msgstr ""

#: ../../source/reference/numeric.rst:11
msgid ""
"There are two numeric types in JSON Schema: `integer` and `number`.  They"
" share the same validation keywords."
msgstr ""

#: ../../source/reference/numeric.rst:16
msgid ""
"JSON has no standard way to represent complex numbers, so there is no way"
" to test for them in JSON Schema."
msgstr ""

#: ../../source/reference/numeric.rst:23
msgid "integer"
msgstr ""

#: ../../source/reference/numeric.rst:25
msgid "The ``integer`` type is used for integral numbers."
msgstr ""

#: ../../source/reference/numeric.rst:33
msgid "Floating point numbers are rejected:"
msgstr ""

#: ../../source/reference/numeric.rst:33 ../../source/reference/numeric.rst:94
msgid "Numbers as strings are rejected:"
msgstr ""

#: ../../source/reference/numeric.rst:49
msgid ""
"The precise treatment of the \"integer\" type may depend on the "
"implementation of your JSON Schema validator.  JavaScript (and thus also "
"JSON) does not have distinct types for integers and floating-point "
"values.  Therefore, JSON Schema can not use type alone to distinguish "
"between integers and non-integers.  The JSON Schema specification "
"recommends, but does not require, that validators use the mathematical "
"value to determine whether a number is an integer, and not the type "
"alone.  Therefore, there is some disagreement between validators on this "
"point.  For example, a JavaScript-based may accept ``1.0`` as an integer,"
" whereas the Python-based `jsonschema "
"<https://pypi.python.org/pypi/jsonschema>`__ does not."
msgstr ""

#: ../../source/reference/numeric.rst:62
msgid ""
"Clever use of the ``multipleOf`` keyword (see `multiples`) can be used to"
" get around this discrepancy.  For example, the following likely has the "
"same behavior on all JSON Schema implementations:"
msgstr ""

#: ../../source/reference/numeric.rst:83
msgid "number"
msgstr ""

#: ../../source/reference/numeric.rst:85
msgid ""
"The ``number`` type is used for any numeric type, either integers or "
"floating point numbers."
msgstr ""

#: ../../source/reference/numeric.rst:94
msgid "Simple floating point number:"
msgstr ""

#: ../../source/reference/numeric.rst:94
msgid "Exponential notation also works:"
msgstr ""

#: ../../source/reference/numeric.rst:118
msgid "Multiples"
msgstr ""

#: ../../source/reference/numeric.rst:120
msgid ""
"Numbers can be restricted to a multiple of a given number, using the "
"``multipleOf`` keyword.  It may be set to any positive number."
msgstr ""

#: ../../source/reference/numeric.rst:123
msgid "Not a multiple of 10:"
msgstr ""

#: ../../source/reference/numeric.rst:146
msgid "Range"
msgstr ""

#: ../../source/reference/numeric.rst:148
msgid ""
"Ranges of numbers are specified using a combination of the ``minimum``, "
"``maximum``, ``exclusiveMinimum`` and ``exclusiveMaximum`` keywords."
msgstr ""

#: ../../source/reference/numeric.rst:152
msgid "``minimum`` specifies a minimum numeric value."
msgstr ""

#: ../../source/reference/numeric.rst:154
msgid ""
"``exclusiveMinimum`` is a boolean.  When ``true``, it indicates that the "
"range excludes the minimum value, i.e., :math:`x > \\mathrm{min}`.  When "
"``false`` (or not included), it indicates that the range includes the "
"minimum value, i.e., :math:`x \\ge \\mathrm{min}`."
msgstr ""

#: ../../source/reference/numeric.rst:160
msgid "``maximum`` specifies a maximum numeric value."
msgstr ""

#: ../../source/reference/numeric.rst:162
msgid ""
"``exclusiveMaximum`` is a boolean.  When ``true``, it indicates that the "
"range excludes the maximum value, i.e., :math:`x < \\mathrm{max}`.  When "
"``false`` (or not included), it indicates that the range includes the "
"maximum value, i.e., :math:`x \\le \\mathrm{max}`."
msgstr ""

#: ../../source/reference/numeric.rst:168
msgid "Less than minimum:"
msgstr ""

#: ../../source/reference/numeric.rst:168
msgid "exclusiveMinimum was not specified, so 0 is included:"
msgstr ""

#: ../../source/reference/numeric.rst:168
msgid "exclusiveMaximum is true, so 100 is not included:"
msgstr ""

#: ../../source/reference/numeric.rst:168
msgid "Greater than maximum:"
msgstr ""


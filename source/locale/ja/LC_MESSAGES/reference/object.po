# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013-2017, Michael Droettboom, Space Telescope Science
# Institute
# This file is distributed under the same license as the Understanding JSON
# Schema package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Understanding JSON Schema 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-02-27 15:43+0900\n"
"PO-Revision-Date: 2017-03-06 17:34+0900\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

#: ../../source/reference/object.rst:7
msgid "object"
msgstr "オブジェクト"

#: ../../source/reference/object.rst:9
msgid ""
"Objects are the mapping type in JSON.  They map \"keys\" to \"values\". "
"In JSON, the \"keys\" must always be strings.  Each of these pairs is "
"conventionally referred to as a \"property\"."
msgstr "オブジェクトはJSONにおけるマップ型です。\"キー\"を\"値\"にマップします。JSONでは\"キー\"は常に文字列でなければなりません。これらの組は慣習的に\"プロパティ\"と呼ばれます。"

#: ../../source/reference/object.rst:15
msgid ""
"In Python, \"objects\" are analogous to the ``dict`` type.  An "
"important difference, however, is that while Python dictionaries "
"may use anything hashable as a key, in JSON all the keys "
"must be strings. "
"Try not to be confused by the two uses of the word \"object\" here: "
"Python uses the word ``object`` to mean the generic base class for "
"everything, whereas in JSON it is used only to mean a mapping from "
"string keys to values."
msgstr "Pythonの場合"

#: ../../source/reference/object.rst:36
msgid "Using non-strings as keys is invalid JSON:"
msgstr "非文字列をキーとして使うのは不正なJSONです:"

#: ../../source/reference/object.rst:78
msgid "Properties"
msgstr "プロパティ"

#: ../../source/reference/object.rst:80
msgid ""
"The properties (key-value pairs) on an object are defined using the "
"``properties`` keyword.  The value of ``properties`` is an object, where "
"each key is the name of a property and each value is a JSON schema used "
"to validate that property."
msgstr "オブジェクトに対するプロパティ（キー・バリューペア）は ``properties`` キーワードを使って定義します。 ``properties`` の値は、各キーがプロパティの名前で、それぞれの値はそのプロパティを検証するためのJSONスキーマです。"

#: ../../source/reference/object.rst:85
msgid ""
"For example, let's say we want to define a simple schema for an address "
"made up of a number, street name and street type:"
msgstr "たとえば番地、通りの名前、通りの種類からなる住所用の単純なスキーマを定義するとしましょう:"

#: ../../source/reference/object.rst:88
msgid "If we provide the number in the wrong type, it is invalid:"
msgstr "間違った型の番号を指定した場合は無効です:"

#: ../../source/reference/object.rst:88
msgid "By default, leaving out properties is valid.  See required."
msgstr "デフォルトではプロパティの省略は有効です。 `required` を参照してください。"

#: ../../source/reference/object.rst:88
msgid "By extension, even an empty object is valid:"
msgstr "拡張によって、空のオブジェクトも有効です:"

#: ../../source/reference/object.rst:88
msgid "By default, providing additional properties is valid:"
msgstr "デフォルトでは追加のプロパティの指定は有効です:"

#: ../../source/reference/object.rst:116
msgid ""
"The ``additionalProperties`` keyword is used to control the handling of "
"extra stuff, that is, properties whose names are not listed in the "
"``properties`` keyword.  By default any additional properties are "
"allowed."
msgstr "``additionalProperties`` キーワードは余分なもの、つまりプロパティのキーワードに記述されていないプロパティの処理を制御するために使います。デフォルトでは追加のプロパティは許可されています。"

#: ../../source/reference/object.rst:121
msgid ""
"The ``additionalProperties`` keyword may be either a boolean or an "
"object.  If ``additionalProperties`` is a boolean and set to ``false``, "
"no additional properties will be allowed."
msgstr "``additionalProperties`` はブールまたはオブジェクトのいずれかを指定します。 ``additionalProperties`` がブールで ``false`` が設定されている場合、追加のプロパティは許可されません。"

#: ../../source/reference/object.rst:125
msgid ""
"Reusing the example above, but this time setting ``additionalProperties``"
" to ``false``."
msgstr "上の例を再利用しますが、今度は ``additionalProperties`` の設定を ``false`` にします。"

#: ../../source/reference/object.rst:128
msgid ""
"Since additionalProperties is false, this extra property \"direction\" "
"makes the object invalid:"
msgstr "``additionalProperties`` が ``false`` なので、追加のプロパティ\"direction\"はオブジェクトを無効なものにします:"

#: ../../source/reference/object.rst:148
msgid ""
"If ``additionalProperties`` is an object, that object is a schema that "
"will be used to validate any additional properties not listed in "
"``properties``."
msgstr "``additionalProperties`` がオブジェクトの場合、そのオブジェクトは ``properties`` にリストされていない追加のプロパティを検証するためのスキーマです。"

#: ../../source/reference/object.rst:151
msgid ""
"For example, one can allow additional properties, but only if they are "
"each a string:"
msgstr "たとえば、追加のプロパティは許可しますが、それが文字列である場合に限定します:"

#: ../../source/reference/object.rst:154
msgid "This is valid, since the additional property's value is a string:"
msgstr "追加プロパティの値が文字列なので、これは有効です:"

#: ../../source/reference/object.rst:154
msgid "This is invalid, since the additional property's value is not a string:"
msgstr "追加プロパティの値が文字列ではないので、これは無効です:"

#: ../../source/reference/object.rst:186
msgid "Required Properties"
msgstr "必須プロパティ"

#: ../../source/reference/object.rst:188
msgid ""
"By default, the properties defined by the ``properties`` keyword are not "
"required.  However, one can provide a list of required properties using "
"the ``required`` keyword."
msgstr "デフォルトでは、プロパティが ``properties`` キーワードによって定義されることは必須ではありません。しかし ``required`` キーワードを使って必須プロパティを指定できます。"

#: ../../source/reference/object.rst:192
msgid ""
"The ``required`` keyword takes an array of one or more strings.  Each of "
"these strings must be unique."
msgstr "``required`` キーワードは、要素が１つ以上の文字列の配列を取ります。これらの文字列はそれぞれユニークでなければなりません。"

#: ../../source/reference/object.rst:195
msgid ""
"In the following example schema defining a user record, we require that "
"each user has a name and e-mail address, but we don't mind if they don't "
"provide their address or telephone number:"
msgstr "ユーザレコードを定義している次のスキーマ例では、各ユーザは名前とメールアドレスは必須ですが、住所や電話番号が設定されていなくても気にしません:"

#: ../../source/reference/object.rst:199
msgid ""
"Providing extra properties is fine, even properties not defined in the "
"schema:"
msgstr "スキーマに定義されていないプロパティであっても、追加のプロパティを指定することに問題はありません:"

#: ../../source/reference/object.rst:199
msgid "Missing the required \"email\" property makes the JSON document invalid:"
msgstr "必須の\"email\"プロパティがないと、JSONドキュメントは無効です:"

#: ../../source/reference/object.rst:239
msgid "Size"
msgstr "サイズ"

#: ../../source/reference/object.rst:241
msgid ""
"The number of properties on an object can be restricted using the "
"``minProperties`` and ``maxProperties`` keywords.  Each of these must be "
"a non-negative integer."
msgstr ""

#: ../../source/reference/object.rst:269
msgid "Dependencies"
msgstr ""

#: ../../source/reference/object.rst:272
msgid "This is an advanced feature of JSON Schema.  Windy road ahead."
msgstr ""

#: ../../source/reference/object.rst:274
msgid ""
"The ``dependencies`` keyword allows the schema of the object to change "
"based on the presence of certain special properties."
msgstr ""

#: ../../source/reference/object.rst:277
msgid "There are two forms of dependencies in JSON Schema:"
msgstr ""

#: ../../source/reference/object.rst:279
msgid ""
"**Property dependencies** declare that certain other properties must be "
"present if a given property is present."
msgstr ""

#: ../../source/reference/object.rst:282
msgid ""
"**Schema dependencies** declare that the schema changes when a given "
"property is present."
msgstr ""

#: ../../source/reference/object.rst:286
msgid "Property dependencies"
msgstr ""

#: ../../source/reference/object.rst:288
msgid ""
"Let's start with the simpler case of property dependencies.  For example,"
" suppose we have a schema representing a customer.  If you have their "
"credit card number, you also want to ensure you have a billing address.  "
"If you don't have their credit card number, a billing address would not "
"be required.  We represent this dependency of one property on another "
"using the ``dependencies`` keyword. The value of the ``dependencies`` "
"keyword is an object.  Each entry in the object maps from the name of a "
"property, *p*, to an array of strings listing properties that are "
"required whenever *p* is present."
msgstr ""

#: ../../source/reference/object.rst:298
msgid ""
"In the following example, whenever a ``credit_card`` property is "
"provided, a ``billing_address`` property must also be present:"
msgstr ""

#: ../../source/reference/object.rst:301 ../../source/reference/object.rst:347
msgid "This instance has a credit_card, but it's missing a billing_address."
msgstr ""

#: ../../source/reference/object.rst:301
msgid "This is okay, since we have neither a credit_card, or a billing_address."
msgstr ""

#: ../../source/reference/object.rst:301
msgid ""
"Note that dependencies are not bidirectional.  It's okay to have a "
"billing address without a credit card number."
msgstr ""

#: ../../source/reference/object.rst:344
msgid ""
"To fix the last issue above (that dependencies are not bidirectional), "
"you can, of course, define the bidirectional dependencies explicitly:"
msgstr ""

#: ../../source/reference/object.rst:347
msgid "This has a billing_address, but is missing a credit_card."
msgstr ""

#: ../../source/reference/object.rst:381
msgid "Schema dependencies"
msgstr ""

#: ../../source/reference/object.rst:383
msgid ""
"Schema dependencies work like property dependencies, but instead of just "
"specifying other required properties, they can extend the schema to have "
"other constraints."
msgstr ""

#: ../../source/reference/object.rst:387
msgid "For example, here is another way to write the above:"
msgstr ""

#: ../../source/reference/object.rst:389
msgid "This instance has a credit_card, but it's missing a billing_address:"
msgstr ""

#: ../../source/reference/object.rst:389
msgid ""
"This has a billing_address, but is missing a credit_card.  This passes, "
"because here billing_address just looks like an additional property:"
msgstr ""

#: ../../source/reference/object.rst:439
msgid "Pattern Properties"
msgstr ""

#: ../../source/reference/object.rst:441
msgid ""
"As we saw above, ``additionalProperties`` can restrict the object so that"
" it either has no additional properties that weren't explicitly listed, "
"or it can specify a schema for any additional properties on the object.  "
"Sometimes that isn't enough, and you may want to restrict the names of "
"the extra properties, or you may want to say that, given a particular "
"kind of name, the value should match a particular schema. That's where "
"``patternProperties`` comes in: it is a new keyword that maps from "
"regular expressions to schemas.  If an additional property matches a "
"given regular expression, it must also validate against the corresponding"
" schema."
msgstr ""

#: ../../source/reference/object.rst:453
msgid ""
"When defining the regular expressions, it's important to note that the "
"expression may match anywhere within the property name.  For example, the"
" regular expression ``\"p\"`` will match any property name with a ``p`` "
"in it, such as ``\"apple\"``, not just a property whose name is simply "
"``\"p\"``.  It's therefore usually less confusing to surround the regular"
" expression in ``^...$``, for example, ``\"^p$\"``."
msgstr ""

#: ../../source/reference/object.rst:461
msgid ""
"In this example, any additional properties whose names start with the "
"prefix ``S_`` must be strings, and any with the prefix ``I_`` must be "
"integers.  Any properties explicitly defined in the ``properties`` "
"keyword are also accepted, and any additional properties that do not "
"match either regular expression are forbidden."
msgstr ""

#: ../../source/reference/object.rst:467
msgid "If the name starts with S_, it must be a string"
msgstr ""

#: ../../source/reference/object.rst:467
msgid "If the name starts with I_, it must be an integer"
msgstr ""

#: ../../source/reference/object.rst:467 ../../source/reference/object.rst:500
msgid "This is a key that doesn't match any of the regular expressions:"
msgstr ""

#: ../../source/reference/object.rst:491
msgid ""
"``patternProperties`` can be used in conjunction with "
"``additionalProperties``.  In that case, ``additionalProperties`` will "
"refer to any properties that are not explicitly listed in ``properties`` "
"and don't match any of the ``patternProperties``.  In the following "
"example, based on above, we add a ``\"builtin\"`` property, which must be"
" a number, and declare that all additional properties (that are neither "
"built-in or matched by ``patternProperties``) must be strings:"
msgstr ""

#: ../../source/reference/object.rst:500
msgid "It must be a string:"
msgstr ""

